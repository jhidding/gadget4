#!/usr/bin/env python
from pathlib import Path

def smooth_ics(input_path: Path, output_path: Path, sigma: float):
    import numpy as np
    from cft import Box, Scale
    from shutil import copyfile
    import h5py

    copyfile(input_path, output_path)
    f = h5py.File(output_path, "r+")
    
    N = f["Parameters"].attrs["GridSize"]
    L = f["Parameters"].attrs["BoxSize"]
    t = f["Header"].attrs["Time"]
    box = Box(3, N, L)

    x = f["PartType1"]["Coordinates"][:]
    v = f["PartType1"]["Velocities"][:]
    q = np.indices(box.shape) \
        .transpose([1, 2, 3, 0]) \
        .reshape([-1, 3]) * box.res
    s = ((x - q) + L/2) % L - L/2
    D = (s/v).mean()

    for k in range(3):
        v_f = np.fft.fftn(v[...,k].reshape(box.shape))
        v_s = np.fft.ifftn(v_f * Scale(box, sigma)(box.K)).real
        v[..., k] = v_s.flat

    f["PartType1"]["Coordinates"][:] = q + D*v
    f["PartType1"]["Velocities"][:] = v
    f.close()


if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Smooth given Zeldovich ICs")
    parser.add_argument("input", help="input file", type=Path)
    parser.add_argument("output", help="output file", type=Path)
    parser.add_argument("--sigma", help="smoothing scale in Mpc/h", type=float, default=1.0)
    args = parser.parse_args()

    assert args.input.exists()
    smooth_ics(args.input, args.output, args.sigma)

